
Generics
 - 컴파일 단계에서 잘못된 타입 사용될 수 있는 문제 제거 가능
 - 자바 5부터 새로 추가
 - 컬렉션, 람다식(함수적 인터페이스), 스트림, NIO에서 널리 사용
 
 ex)
 Class ArrayList<E>
 default BiConsumer<T,U> andThen(BiConsumer<? super T, ? super U> after)
 
 제네릭을 사용하는 코드의 이점
  - 컴파일 시 강한 타입체크 가능
  	실행 시 타입 에러가 나는 것 방지
  	컴파일 시에 미리 타입을 강하게 체크해서 에러 사전 방지

List list = new ArrayList();
list.add("hello");
String str = (String) list.get(0);
			↓↓↓↓↓
List<String> list = new ArrayList<String>();
list.add("Hello");
String str = list.get(0);

제네릭 타입
  타입을 파라미터로 가지는 클래스와 인터페이스
  선언 시 클래스 또는 인터페이스 이름 뒤에 <> 부호 붙임
  <> 사이에는 타입파라미터 위치
  
  타입 파라미터
  	일반적으로 대문자 알파벳 한 문자로 표현
  	개발 코드에서는 타입 파라미터 자리에 구체적인 타입을 지정해야

제네릭 사용 안하면
 - Object 타입 사용 -> 빈번한 타입변환 발생 -> 프로그램 성능 저하
제네릭 사용하면
 - 클래스 선언할 때 타입 파라미터 사용
 - 컴파일 시 타입 파라미터가 구체적인 클래스로 변경
 
멀티 타입 파라미터
class Product<T, M>{...}
주소 assign시, Product<Tv, String> product = ...

제한된 타입 파라미터

와일드 카드 : 실행할 시에
<?> : 제한 없음
<? super Child>		: 부모는 올 수 있다
<? extend Parent>	: 자식은 올 수 있다 

제네릭 타입을 부모 클래스로 사용한 경우
 - 부모클래스의 타입 파라미터는 자식클래스에도 기술해야 함
 - 추가적인 타입 파라미터 가질 수 있음
제네릭 인터페이스를 구현할 경우
 - 제네릭 인터페이스를 구현한 클래스도 제네릭 타입
