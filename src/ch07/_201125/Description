상속

child class
parent class

상속
 - extends로 표현
 - 단일 상속만 가능
 - 자손클래스 객체화 시 부모클래스의 객체를 먼저 생성
 - 모든 클래스는 Object 클래스를 상속받는다.
 
 super 레퍼런스 : 부모클래스를 가리키는 레퍼런스
 super 생성자 : 부모 클래스의 생성자 호출

 this, super 레퍼런스는 static이 붙은 메서드에서는 사용 불가
 따라서 main()메서드에서도 사용 불가
 
 오버라이딩
  - 부모클래스에서 상속받은 메서드를 자식클래스에 맞도록 고쳐서 사용하는 것
  - 메서드의 시그니쳐는 물론 리턴 타입까지 일치해야 한다.
  - 접근제어자는 같거나 덜 제한적인 접근제어자를 써야한다.(public에 가까운)
  
 다형성(polymorphism)
  - 클래스의 객체를 생성하는데 융통성을 부여하기 위함
  - 여러개의 서로 다른 형식과 모양을 가진다는 의미.
  - 다형성을 이용하면 객체의 유형에 따라 서로 다른 작업을 수행하도록 할 수 있다.
  - 한가지 타입으로 여러 형태를 작성할 수 있는 유동적 형태가 프로그램을 더욱 편하게 작성하게 해줌.
  
 추상 클래스(abstract class)
  - 추상 메서드가 하나라도 있으면 추상 클래스
  - 객체화 불가
  - 생성자, 멤버변수, 멤버메서드 소유 가능
 
 추상 메서드(abstract method)
  - 선언부만 존재하는 메서드. 구현부가 없음
  - 자손 클래스에서 반드시 오버라이딩 해야 함. 
  
추상클래스 간에도 상속 가능
추상클래스에서는 추상메서드를 재정의할 필요 없음

패키지
 - 클래스의 모임
 - 클래스의 이름을 유일하게 만들어주는 식별자
 - 패키지 선언은 반드시 첫줄에
 
import
 - 다른 패키지에 속한 클래스를 사용하고자 할 때
 	java.util.Scanner scan = ...;
 - 파일 처음에 패키지명을 기술하면 해당 패키지의 클래스는 패키지 이름 생략 가능
 	ex) import java.util.Scanner;
 
접근제어자		접근 허용 범위
private		동일 클래스
(default)	+동일패키지
protected	++상속관계
public		+++모든 클래스

private		클래스는 사용불가
(default)
protected	클래스는 사용불가
public
메서드/생성자, 변수, 상수는 전부 가능  

final 클래스
 - 상속 불가 메서드

final 메서드
 - 재정의 불가 메서드(오버라이딩 불가)

final 변수(상수)
 - 상수라도 생성자에서 단 한번 변경 가능(객체 별로 다른 상수값 가능)
 - 생성자에서 초기화하기 위해서는 명시적 초기화했으면 안됨







